/**
 * @file argparse2_doc.cc
 * @author Jiannan Tian
 * @brief
 * @version 0.1.1
 * @date 2020-09-22
 *
 * Copyright (c) 2020 by Washington State University, The University of Alabama, Argonne National Laboratory
 *
 */

#include <string>

using std::string;

const string cusz_build_str = "((pre-release)) build 2009.22.1";
const string cusz_version   = "2009.22.1";
const string cusz_compat    = "0";

const string huff_re_build_str   = "((pre-release)) build 2009.22.1";
const string huff_re_version     = "2009.22.1";
const string huff_re_cusz_compat = "0";

extern const string cusz_short_doc =
    "\n"
    "OVERVIEW: cuSZ: An Efficient GPU-Based Error-Bounded Lossy Compression Framework for Scientific Data\n"
    "\n"
    "USAGE:\n"
    "  The basic use with demo datum is listed below,\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -D cesm -z -x\n"
    "                 ^  ~~~~~~ ~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~  ^  ^\n"
    "                 |   mode   error         input datum file        demo   |  |\n"
    "               dtype        bound                                 data  zip unzip\n"
    "\n"
    "  compress and extract, demo dataset:\n"
    "    cusz -f32|-f64 -m [eb mode] -e [eb] -i [datum file] -D [demo dataset] -z -x\n"
    "    (change \"-z -x\" to \"-r\" for dry run)\n"
    "  compress and extract, arbitrary datum:\n"
    "    cusz -f32|-f64 -m [eb mode] -e [eb] -i [datum file] -1|-2|-3 [nx [ny [nz]] -z -x\n"
    "    (change \"-z -x\" to \"-r\" for dry run)\n"
    "  \n"
    "EXAMPLES\n"
    "  CESM example:\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -D cesm -z -x\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -D cesm -r\n"
    "  Hurricane Isabel example:\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-hurr-CLOUDf48 -D hurricane -z -x\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-hurr-CLOUDf48 -D hurricane -r\n"
    "  EXAFEL example:\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-exafel-59200x388 -D exafeldemo -z -x --pre binning\n"
    "    ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-exafel-59200x388 -D exafeldemo -z -x --pre binning --skip "
    "huffman\n"
    "\n"
    "DOC:\n"
    "  Type \"cusz -h\" for details.\n";

extern const string cusz_full_doc =
    "*NAME*\n"
    "        cuSZ: An Efficient GPU-Based Error-Bounded Lossy Compression Framework for Scientific Data\n"
    "        Lowercased \"*cusz*\" is the command."
    //"        cusz - a GPU-accelerated error-bounded lossy compressor for scientific data.\n"
    "\n"
    "*SYNOPSIS*\n"
    "        The basic use is listed below,\n"
    "        *cusz* *-f*32 *-m* r2r *-e* 1e-4 *-i* ./data/sample-cesm-CLDHGH *-2* 3600 1800 *-z -x*\n"
    // "        cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -2 3600 1800 -z -x\n"
    "               ^  ~~~~~~ ~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~  ^  ^\n"
    "               |   mode   error        input datum file        low-to-high  |  |\n"
    "             dtype        bound                                order       zip unzip\n"
    "\n"
    "        *cusz* *-f*32|*-f*64 *-m* [eb mode] *-e* [eb] *-i* [datum file] *-D* [demo dataset] *-z* *-x*\n"
    "        *cusz* *-f*32|*-f*64 *-m* [eb mode] *-e* [eb] *-i* [datum file] *-1*|*-2*|*-3* [nx [ny [nz]] *-z* "
    "*-x*\n"
    "\n"
    "*OPTIONS*\n"
    "    *Mandatory*\n"
    "        *-z* or *--compress* or *--*@z@*ip*\n"
    "        *-x* or *--e*@x@*tract* or *--decompress* or *--unzip*\n"
    "        *-r* or *--dry-*@r@*un*\n"
    "                No lossless Huffman codec. Only to get data quality summary.\n"
    "                In addition, quant. rep. and dict. size are retained\n"
    "\n"
    "        *-m* or *--*@m@*ode* <abs|r2r>\n"
    "                Specify error-controling mode. Supported modes include:\n"
    "                _abs_: absolute mode, eb = input eb\n"
    "                _r2r_: relative-to-value-range mode, eb = input eb x value range\n"
    "\n"
    "        *-e* or *--eb* or *--error-bound* [num]\n"
    "                Specify error bound. e.g., _1.23_, _1e-4_, _1.23e-4.56_\n"
    "\n"
    "        *-i* or *--input* [datum file]\n"
    "        *-o* or *--output* [alternative decompressed file]\n"
    "                Specify otherwise decompressed file name.\n"
    "\n"
    "        *-d* or *--dict-size* [256|512|1024|...]\n"
    "                Specify dictionary size/quantization bin number.\n"
    "                Should be a power-of-2.\n"
    "\n"
    "        *-1* [x]       Specify 1D datum/field size.\n"
    "        *-2* [x] [y]   Specify 2D datum/field sizes, with dimensions from low to high.\n"
    "        *-3* [x] [y] [z]   Specify 3D datum/field sizes, with dimensions from low to high.\n"
    "\n"
    "    *Modules*\n"
    "        *-X* or *-S* or *--e*@x@*clude* or *--*@s@*kip* _module-1_,_module-2_,...,_module-n_,\n"
    "                Disable functionality modules. Supported module(s) include:\n"
    "                _huffman_  Huffman codec after prediction+quantization (p+q) and before reveresed p+q.\n"
    "                _write.x_  Skip write decompression data.\n"
    "\n"
    "        *-p* or *--pre* _method-1_,_method-2_,...,_method-n_\n"
    "                Enable preprocessing. Supported preproessing method(s) include:\n"
    "                _binning_  Downsampling datum by 2x2 to 1.\n"
    "\n"
    "    *Demonstration*\n"
    "        *-h* or *--help*   Get help documentation.\n"
    "\n"
    "        *-M* or *--meta*   Get archive metadata. (TODO)\n"
    "\n"
    "        *-D* or *--demo* [demo-dataset]\n"
    "                Use demo dataset, will omit given dimension(s). Supported datasets include:\n"
    "                1D: _hacc_  _hacc1g_  _hacc4g_\n"
    "                2D: _cesm_  _exafeldemo_\n"
    "                3D: _hurricane_  _nyx_  _qmc_  _qmcpre_  _aramco_\n"
    "\n"
    "    *Internal* (will be automated with configuration when going public)\n"
    "        *-Q* or *--rep*@q@*uant* <8|16|32>\n"
    "                Specify bincode/quantization code representation.\n"
    "                Options _8_, _16_, _32_ are for *uint8_t*, *uint16_t*, *uint32_t*, respectively.\n"
    "                ^^Manually specifying this may not result in optimal memory footprint.^^\n"
    "\n"
    "        *-H* or *--rep*@h@*uff* <32|64>\n"
    "                Specify Huffman codeword representation.\n"
    "                Options _32_, _64_ are for *uint32_t*, *uint64_t*, respectively.\n"
    "                ^^Manually specifying this may not result in optimal memory footprint.^^\n"
    "\n"
    "        *-C* or *--huff-*@c@*hunk* [256|512|1024|...]\n"
    "                Specify chunk size for Huffman codec.\n"
    "                Should be a power-of-2 that is sufficiently large.\n"
    "                ^^This affects Huffman decoding performance significantly.^^\n"
    "\n"
    "*EXAMPLES*\n"
    "    *Demo Datasets*\n"
    "        *CESM* example:\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -D cesm -z -x\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-cesm-CLDHGH -D cesm -r\n"
    "\n"
    "        *Hurricane Isabel* example:\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-hurr-CLOUDf48 -D hurricane -z -x\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-hurr-CLOUDf48 -D hurricane -r\n"
    "\n"
    "        *EXAFEL* example:\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-exafel-59200x388 -D exafeldemo -z -x --pre binning\n"
    "        ./bin/cusz -f32 -m r2r -e 1e-4 -i ./data/sample-exafel-59200x388 -D exafeldemo -z -x --pre binning "
    "--skip huffman\n";

extern const string huff_re_short_doc =
    "\n"
    "OVERVIEW: Huffman submodule as standalone program\n"  // TODO from this line on
    "\n"
    "USAGE:\n"
    "  The basic use with demo datum is listed below,\n"
    "    ./huff --encode --decode --verify --input ./baryon_density.dat.b16 \\\n"
    "        -3 512 512 512 --input-rep 16 --huffman-rep 32 --huffman-chunk 2048 --dict-size 1024\n"
    "  or shorter\n"
    "    ./huff -e -d -V -i ./baryon_density.dat.b16 -3 512 512 512 -R 16 -H 32 -C 2048 -c 1024\n"
    "            ^  ^  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~ ~~~~~ ~~~~~ ~~~~~~~ ~~~~~~~\n"
    "            |  |  |       input datum file         dimension   input Huff. Huff.   codebook\n"
    "          enc dec verify                                       rep.  rep.  chunk   size\n"
    "\n"
    "EXAMPLES\n"
    "  Essential:\n"
    "    ./bin/huff -e -d -i ./baryon_density.dat.b16 -3 512 512 512 -R 16 -c 1024\n"
    "    have to input dimension, and higher dimension for a multiplication of each dim.,\n"
    "    as default values input-rep=16 (bits), huff-rep=32 (bits), codebokk-size=1024 (symbols)\n"
    "\n";

extern const string doc_dim_order =
    "\n"
    "    |<--------------------------- 3600 --------------------------->|    \n"
    "    +--------------------------------------------------------------+  - \n"
    "    |                                                              |  ^ \n"
    "    |                                                              |  | \n"
    "    |            CESM-ATM:    1800x3600 (y-x order)                |  | \n"
    "    |            datum name:  <field>_1800_3600                    |  | \n"
    "    |                                                              | 1800 \n"
    "    |            input:       -2 3600 1800                         |  | \n"
    "    |            input order: -2 [x] [y]                           |  | \n"
    "    |                                                              |  | \n"
    "    |                                                              |  v \n"
    "    +--------------------------------------------------------------+  - \n"
    "\n";